lowest_life_exp_in_region <- function(region) {
info_of_the_region <- life_expectancy[life_expectancy$region == region, ]
return(info_of_the_region[info_of_the_region$le_2013 ==
min(info_of_the_region$le_2013), "country"])
}
# Using the function you just wrote, create a variable `lowest_in_south_asia`
# that is the country with the lowest life expectancy in 2013 in South Asia
lowest_in_south_asia <- lowest_life_exp_in_region("South Asia")
# Write a function `bigger_change()` that takes in two country names
# as parameters, and returns a sentence that describes which country experienced
# a larger gain in life expectancy (and by how many years).
# For example, if you passed the values "China", and "Bolivia" to you function,
# It would return this:
# "The country with the bigger change in life expectancy was China (gain=31.9),
#  whose life expectancy grew by 7.4 years more than Bolivia's (gain=24.5)."
# Make sure to round your numbers to one digit.
bigger_change <- function(name1, name2) {
country1_gain <- life_expectancy[life_expectancy$country == name1, "change"]
country2_gain <- life_expectancy[life_expectancy$country == name2, "change"]
round_country1 <- round(country1_gain[1], 1)
round_country2 <- round(country2_gain[1], 1)
difference <- round_country1 - round_country2
if (difference > 0) {
paste0(
"The country with the bigger change in life expectancy was ", name1,
" (gain=", round_country1, "), whose life expectancy grew by ",
difference, " years more than", name2, "'s (gain=", round_country2,
")."
)
} else {
difference <- -1 * difference
paste0(
"The country with the bigger change in life expectancy was ", name2,
" (gain=", round_country2, "), whose life expectancy grew by ",
difference, " years more than ", name1, "'s (gain=", round_country1,
")."
)
}
}
# Using your `bigger_change()` function, create a variable `usa_or_france`
# that describes who had a larger gain in life expectancy (the U.S. or France)
usa_or_france <- bigger_change("United States", "France")
# Write your `life_expectancy` data.frame to a new .csv file to your
# data/ directory with the filename `life_expectancy_with_change.csv`.
# Make sure not to write row names.
path <- "~/Desktop/INFO201/a3-using-data-xyx0224/data/"
file_name <- paste0(path, "life_expectancy_with_change.csv")
write.csv(life_expectancy, file = file_name, row.names = FALSE)
############################## Challenge (10 points) ###########################
# Create a variable `highest_avg_change` that has the name of the region with
# the highest *average change* in life expectancy between the two time points.
# To do this, you'll need to *compute the average* change across the countries
# in each region, and then compare the averages across regions.
# Feel free to use any library of your choice, or base R functions.
library("dplyr")
regions <- unique(life_expectancy$region)
avg_changes <- 1:length(regions)
for (i in 1:length(regions)) {
filtered <- filter(life_expectancy, region == regions[i])
avg_change <- sum(select(filtered, change)) / nrow(filtered)
avg_changes[i] <- avg_change
}
max_change <- max(avg_changes)
index <- function(regions) {
for (i in 1:length(regions)) {
if (avg_changes[i] == max_change) {
return(i)
}
}
}
highest_avg_change <- regions[index(regions)]
# Create a *well labeled* plot (readable title, x-axis, y-axis) showing
# Life expectancy in 1960 v.s. Change in life expectancy
# Programmatically save (i.e., with code, not using the Export button)
# your graph as a .png file in your repo
# Then, in a comment below, *provide an interpretation* of the relationship
# you observe. Feel free to use any library of your choice, or base R functions.
plot(life_expectancy$change, life_expectancy$le_1960,
main =
"Life expectancy in 1960 v.s. Change in life expectancy", xlab =
"Change in life expectancy", ylab = "Life expectancy in 1960"
)
dev.copy(png, "plot.png")
dev.off()
setwd("~/Desktop/INFO201/a3-using-data-xyx0224")
# Create a vector `first_names` with 5 names in it
first_names <- c("Amber", "Dylan", "Erika", "Iris", "Jake")
# Create a vector `math_grades` with 5 hypothetical grades (0 - 100)
# in a math course (that correspond to the 5 names above)
math_grades <- c(95, 99, 85, 88, 67)
# Create a vector `spanish_grades` with 5 hypothetical grades (0 - 100)
# in a Spanish course (that correspond to the 5 names above
spanish_grades <- c(80, 95, 75, 90, 65)
# Create a data.frame variable `students` by combining
# the vectors `first_names`, `math_grades`, and `spanish_grades`
students <- data.frame(first_names, math_grades, spanish_grades,
stringsAsFactors = FALSE)
View(students)
# Create a variable `num_students` that contains the
# number of rows in your dataframe `students`
num_students <- nrow(students)
# Create a variable `num_courses` that contains the number of columns
# in your dataframe `students` minus one (b/c of their names)
num_courses <- ncol(students) - 1
# Add a new column `grade_diff` to your dataframe, which is equal to
# `students$math_grades` minus `students$spanish_grades`
grade_diff <- students$math_grades - students$spanish_grades
# Add a new column `grade_diff` to your dataframe, which is equal to
# `students$math_grades` minus `students$spanish_grades`
student$grade_diff <- students$math_grades - students$spanish_grades
# Add a new column `grade_diff` to your dataframe, which is equal to
# `students$math_grades` minus `students$spanish_grades`
students$grade_diff <- students$math_grades - students$spanish_grades
# Add another column `better_at_math` as a boolean (TRUE/FALSE) variable that
# indicates that a student got a better grade in math
students$better_at_math <- students$grade_diff > 0
# Create a variable `num_better_at_math` that is the number
# (i.e., one numeric value) of students better at math
num_better_at_math <- sum(students$better_at_math)
# Write your `students` dataframe to a new .csv file inside your data/ directory
# with the filename `grades.csv`. Make sure *not* to write row names.
write.csv(students,
file =
"~/Desktop/INFO201/a3-using-data-xyx0224/data/grades.csv",
row.names = FALSE
)
# In this section, you'll work with the `Titanic` data set
# Which is built into the R environment. You should be able to `View()` it
# Pay *close attention* to what each column means. Use ?Titanic to read more.
View(Titanic)
# In this section, you'll work with the `Titanic` data set
# Which is built into the R environment. You should be able to `View()` it
# Pay *close attention* to what each column means. Use ?Titanic to read more.
?Titanic
View(Titanic)
# This data set actually loads in a format called a *table*
# See https://cran.r-project.org/web/packages/data.table/data.table.pdf
# Use the `is.data.frame()` function to test if it is a table.
is.data.frame(Titanic)
# You should convert the `Titanic` variable into a data frame;
# you can use the `data.frame()` function or `as.data.frame()`
# Be sure to **not** treat strings as factors!
titanic <- data.frame(Titanic, stringsAsFactors = FALSE)
View(titanic)
# Create a variable `children` that are the *only* the rows of the data frame
# with information about the number children on the Titanic.
children <- titanic[titanic$Age == "Child", ]
View(children)
# Create a variable `num_children` that is the total number of children.
# Hint: remember the `sum()` function!
num_children <- sum(children$Freq)
# Create a variable `most_lost` which has the *row* with the
# largest absolute number of losses (people who did not survive).
# Tip: if you want, you can use multiple statements (lines of code)
# if you find that helpful to create this variable.
most_lost <- titanic[titanic$Freq == max(titanic$Freq), ]
View(most_lost)
# Create a variable `most_lost` which has the *row* with the
# largest absolute number of losses (people who did not survive).
# Tip: if you want, you can use multiple statements (lines of code)
# if you find that helpful to create this variable.
most_lost <- titanic[titanic$Freq == max(titanic$Freq)
& titanic$Survived == 'No', ]
View(most_lost)
# Create a variable `most_lost` which has the *row* with the
# largest absolute number of losses (people who did not survive).
# Tip: if you want, you can use multiple statements (lines of code)
# if you find that helpful to create this variable.
most_lost <- titanic[titanic$Freq == max(titanic$Freq)
& titanic$Survived == 'Yes', ]
View(most_lost)
# Create a variable `most_lost` which has the *row* with the
# largest absolute number of losses (people who did not survive).
# Tip: if you want, you can use multiple statements (lines of code)
# if you find that helpful to create this variable.
did_not_survive <- titanic[titanic$Survived == 'No', ]
# Create a variable `most_lost` which has the *row* with the
# largest absolute number of losses (people who did not survive).
# Tip: if you want, you can use multiple statements (lines of code)
# if you find that helpful to create this variable.
lost <- titanic[titanic$Survived == 'No', ]
View(lost)
most_lost <- lost[lost$Freq == max(lost$Freq)
most_lost <- lost[lost$Freq == max(lost$Freq)]
View(most_lost)
# Create a variable `most_lost` which has the *row* with the
# largest absolute number of losses (people who did not survive).
# Tip: if you want, you can use multiple statements (lines of code)
# if you find that helpful to create this variable.
lost <- titanic[titanic$Survived == 'No', ]
most_lost <- lost[lost$Freq == max(lost$Freq)]
most_lost <- lost[lost$Freq == max(lost$Freq), ]
View(most_lost)
# Define a function called `survival_rate()` that takes in a ticket class
# (e.g., "1st", "2nd") as an argument.This function should return the following
# sentence that compares the *total survival rate* of adult men vs.
# "women and children" in that ticketing class. It should read (for example):
# "Of Crew class, 87% of women and children survived and 22% of men survived.".
# The approach you take to generating the sentence to return is up to you.
# A good solution will likely utilize filtering to produce the required data.
survival_rate <- function(class) {
chosen_class <- titanic[titanic$Class == class, ]
women <- chosen_class[chosen_class$Sex == "Female" & chosen_class$Age ==
"Adult", ]
women_survived <- women[women$Survived == "Yes", ]
men <- chosen_class[chosen_class$Sex == "Male" & chosen_class$Age ==
"Adult", ]
men_survived <- men[men$Survived == "Yes", ]
children <- chosen_class[chosen_class$Age == "Child", ]
children_survived <- children[children$Survived == "Yes", ]
percent_women_children_survived <- round((sum(women_survived$Freq) +
sum(children_survived$Freq)) /
(sum(women$Freq) + sum(children$Freq)) *
100)
percent_men_survived <- round(sum(men_survived$Freq) / sum(men$Freq) * 100)
paste0(
"Of Crew class, ", percent_women_children_survived,
"% of women and children survived and ",
percent_men_survived, "% of men survived."
)
}
# Create variables `first_survived`, `second_survived`, `third_survived` and
# `crew_survived` by passing each class to your function above.
first_survived <- survival_rate("1st")
second_survived <- survival_rate("2nd")
third_survived <- survival_rate("3rd")
crew_survived <- survival_rate("Crew")
print(first_survived)
print(second_survived)
print(third_survived)
print(crew_survived)
# Define a function called `survival_rate()` that takes in a ticket class
# (e.g., "1st", "2nd") as an argument.This function should return the following
# sentence that compares the *total survival rate* of adult men vs.
# "women and children" in that ticketing class. It should read (for example):
# "Of Crew class, 87% of women and children survived and 22% of men survived.".
# The approach you take to generating the sentence to return is up to you.
# A good solution will likely utilize filtering to produce the required data.
survival_rate <- function(class) {
chosen_class <- titanic[titanic$Class == class, ]
women <- chosen_class[chosen_class$Sex == "Female" & chosen_class$Age ==
"Adult", ]
women_survived <- women[women$Survived == "Yes", ]
men <- chosen_class[chosen_class$Sex == "Male" & chosen_class$Age ==
"Adult", ]
men_survived <- men[men$Survived == "Yes", ]
children <- chosen_class[chosen_class$Age == "Child", ]
children_survived <- children[children$Survived == "Yes", ]
percent_women_children_survived <- round((sum(women_survived$Freq) +
sum(children_survived$Freq)) /
(sum(women$Freq) +
sum(children$Freq)) * 100)
percent_men_survived <- round(sum(men_survived$Freq) / sum(men$Freq) * 100)
paste0("Of Crew class, ", percent_women_children_survived,
"% of women and children survived and ",
percent_men_survived, "% of men survived.")
}
# Create variables `first_survived`, `second_survived`, `third_survived` and
# `crew_survived` by passing each class to your function above.
first_survived <- survival_rate("1st")
second_survived <- survival_rate("2nd")
third_survived <- survival_rate("3rd")
# Define a function called `survival_rate()` that takes in a ticket class
# (e.g., "1st", "2nd") as an argument.This function should return the following
# sentence that compares the *total survival rate* of adult men vs.
# "women and children" in that ticketing class. It should read (for example):
# "Of Crew class, 87% of women and children survived and 22% of men survived.".
# The approach you take to generating the sentence to return is up to you.
# A good solution will likely utilize filtering to produce the required data.
survival_rate <- function(class) {
chosen_class <- titanic[titanic$Class == class, ]
women <- chosen_class[chosen_class$Sex == "Female" & chosen_class$Age ==
"Adult", ]
women_survived <- women[women$Survived == "Yes", ]
men <- chosen_class[chosen_class$Sex == "Male" & chosen_class$Age ==
"Adult", ]
men_survived <- men[men$Survived == "Yes", ]
children <- chosen_class[chosen_class$Age == "Child", ]
children_survived <- children[children$Survived == "Yes", ]
percent_women_children_survived <- round((sum(women_survived$Freq) +
sum(children_survived$Freq)) /
(sum(women$Freq) +
sum(children$Freq)) * 100)
percent_men_survived <- round(sum(men_survived$Freq) / sum(men$Freq) * 100)
paste0("Of ", class, " class, ", percent_women_children_survived,
"% of women and children survived and ",
percent_men_survived, "% of men survived.")
}
# Create variables `first_survived`, `second_survived`, `third_survived` and
# `crew_survived` by passing each class to your function above.
first_survived <- survival_rate("1st")
second_survived <- survival_rate("2nd")
third_survived <- survival_rate("3rd")
crew_survived <- survival_rate("Crew")
# Using the `read.csv` function, read the life_expectancy.csv file into
# a variable called `life_expectancy`. Makes sure not to read strings as factors
path <- "~/Desktop/INFO201/a3-using-data-xyx0224/data/life_expectancy.csv"
life_expectancy <- read.csv(file = path, stringsAsFactors = FALSE)
# Determine if `life_expectancy` is a data.frame by using
# the is.data.frame function. You may also want to View() it.
is.data.frame(life_expectancy)
View(life_expectancy)
# Create a column `life_expectancy$change` that is the change
# in life expectancy from 1960 to 2013
life_expectancy$change <- life_expectancy$le_2013 - life_expectancy$le_1960
# Create a variable `most_improved` that is the *name* of the country
# with the largest gain in life expectancy
most_improved <- life_expectancy[life_expectancy$change ==
max(life_expectancy$change), "country"]
# Create a variable `num_small_gain` that has the *number* of countries
# whose life expectance has improved fewer than 5 years between 1960 and 2013
num_small_gain <- nrow(life_expectancy[life_expectancy$change < 5, ])
# Write a function `country_change()` that takes in a country's name
# as a parameter, and returns it's change in life expectancy from 1960 to 2013
country_change <- function(country_name) {
return(life_expectancy[life_expectancy$country == country_name, "change"])
}
# Using your `country_change()` function, create a variable `sweden_change`
# that is the change in life expectancy from 1960 to 2013 in Sweden
sweden_change <- country_change("Sweden")
# Define a function `lowest_life_exp_in_region()` that takes in a **region**
# as an argument, and returns the **name of the country**
# with the lowest life expectancy in 2013 (in that region)
lowest_life_exp_in_region <- function(region) {
info_of_the_region <- life_expectancy[life_expectancy$region == region, ]
return(info_of_the_region[info_of_the_region$le_2013 ==
min(info_of_the_region$le_2013), "country"])
}
# Using the function you just wrote, create a variable `lowest_in_south_asia`
# that is the country with the lowest life expectancy in 2013 in South Asia
lowest_in_south_asia <- lowest_life_exp_in_region("South Asia")
# Write a function `bigger_change()` that takes in two country names
# as parameters, and returns a sentence that describes which country experienced
# a larger gain in life expectancy (and by how many years).
# For example, if you passed the values "China", and "Bolivia" to you function,
# It would return this:
# "The country with the bigger change in life expectancy was China (gain=31.9),
#  whose life expectancy grew by 7.4 years more than Bolivia's (gain=24.5)."
# Make sure to round your numbers to one digit.
bigger_change <- function(name1, name2) {
country1_gain <- life_expectancy[life_expectancy$country == name1, "change"]
country2_gain <- life_expectancy[life_expectancy$country == name2, "change"]
round_country1 <- round(country1_gain[1], 1)
round_country2 <- round(country2_gain[1], 1)
difference <- round_country1 - round_country2
if (difference > 0) {
paste0(
"The country with the bigger change in life expectancy was ", name1,
" (gain=", round_country1, "), whose life expectancy grew by ",
difference, " years more than", name2, "'s (gain=", round_country2,
")."
)
} else {
difference <- -1 * difference
paste0(
"The country with the bigger change in life expectancy was ", name2,
" (gain=", round_country2, "), whose life expectancy grew by ",
difference, " years more than ", name1, "'s (gain=", round_country1,
")."
)
}
}
# Using your `bigger_change()` function, create a variable `usa_or_france`
# that describes who had a larger gain in life expectancy (the U.S. or France)
usa_or_france <- bigger_change("United States", "France")
# Using your `bigger_change()` function, create a variable `usa_or_france`
# that describes who had a larger gain in life expectancy (the U.S. or France)
usa_or_france <- bigger_change("China", "Bolivia")
# Write a function `bigger_change()` that takes in two country names
# as parameters, and returns a sentence that describes which country experienced
# a larger gain in life expectancy (and by how many years).
# For example, if you passed the values "China", and "Bolivia" to you function,
# It would return this:
# "The country with the bigger change in life expectancy was China (gain=31.9),
#  whose life expectancy grew by 7.4 years more than Bolivia's (gain=24.5)."
# Make sure to round your numbers to one digit.
bigger_change <- function(name1, name2) {
country1_gain <- life_expectancy[life_expectancy$country == name1, "change"]
country2_gain <- life_expectancy[life_expectancy$country == name2, "change"]
round_country1 <- round(country1_gain[1], 1)
round_country2 <- round(country2_gain[1], 1)
difference <- round_country1 - round_country2
if (difference > 0) {
paste0(
"The country with the bigger change in life expectancy was ", name1,
" (gain=", round_country1, "), whose life expectancy grew by ",
difference, " years more than ", name2, "'s (gain=", round_country2,
")."
)
} else {
difference <- -1 * difference
paste0(
"The country with the bigger change in life expectancy was ", name2,
" (gain=", round_country2, "), whose life expectancy grew by ",
difference, " years more than ", name1, "'s (gain=", round_country1,
")."
)
}
}
# Using your `bigger_change()` function, create a variable `usa_or_france`
# that describes who had a larger gain in life expectancy (the U.S. or France)
usa_or_france <- bigger_change("China", "Bolivia")
# Using your `bigger_change()` function, create a variable `usa_or_france`
# that describes who had a larger gain in life expectancy (the U.S. or France)
usa_or_france <- bigger_change("United States", "France")
# Write your `life_expectancy` data.frame to a new .csv file to your
# data/ directory with the filename `life_expectancy_with_change.csv`.
# Make sure not to write row names.
path <- "~/Desktop/INFO201/a3-using-data-xyx0224/data/"
file_name <- paste0(path, "life_expectancy_with_change.csv")
write.csv(life_expectancy, file = file_name, row.names = FALSE)
############################## Challenge (10 points) ###########################
# Create a variable `highest_avg_change` that has the name of the region with
# the highest *average change* in life expectancy between the two time points.
# To do this, you'll need to *compute the average* change across the countries
# in each region, and then compare the averages across regions.
# Feel free to use any library of your choice, or base R functions.
library("dplyr")
regions <- unique(life_expectancy$region)
avg_changes <- 1:length(regions)
for (i in 1:length(regions)) {
filtered <- filter(life_expectancy, region == regions[i])
avg_change <- sum(select(filtered, change)) / nrow(filtered)
avg_changes[i] <- avg_change
}
max_change <- max(avg_changes)
index <- function(regions) {
for (i in 1:length(regions)) {
if (avg_changes[i] == max_change) {
return(i)
}
}
}
highest_avg_change <- regions[index(regions)]
# Create a *well labeled* plot (readable title, x-axis, y-axis) showing
# Life expectancy in 1960 v.s. Change in life expectancy
# Programmatically save (i.e., with code, not using the Export button)
# your graph as a .png file in your repo
# Then, in a comment below, *provide an interpretation* of the relationship
# you observe. Feel free to use any library of your choice, or base R functions.
plot(life_expectancy$change, life_expectancy$le_1960,
main =
"Life expectancy in 1960 v.s. Change in life expectancy", xlab =
"Change in life expectancy", ylab = "Life expectancy in 1960"
)
dev.copy(png, "plot.png")
dev.off()
setwd("~/Desktop/INFO201/a3-using-data-xyx0224")
styler:::style_active_file()
lintr::lint("assignment.R")
# Write your `students` dataframe to a new .csv file inside your data/ directory
# with the filename `grades.csv`. Make sure *not* to write row names.
write.csv(students, file = "/data/grades.csv", row.names = FALSE)
setwd("~/Desktop/INFO201/a3-using-data-xyx0224")
# Write your `students` dataframe to a new .csv file inside your data/ directory
# with the filename `grades.csv`. Make sure *not* to write row names.
write.csv(students, file = "grades.csv", row.names = FALSE)
# Write your `students` dataframe to a new .csv file inside your data/ directory
# with the filename `grades.csv`. Make sure *not* to write row names.
write.csv(students, file = "~/data/grades.csv", row.names = FALSE)
# Write your `students` dataframe to a new .csv file inside your data/ directory
# with the filename `grades.csv`. Make sure *not* to write row names.
write.csv(students, file = "data/grades.csv", row.names = FALSE)
# Write your `life_expectancy` data.frame to a new .csv file to your
# data/ directory with the filename `life_expectancy_with_change.csv`.
# Make sure not to write row names.
write.csv(life_expectancy, file =
"data/life_expectancy_with_change.csv", row.names = FALSE)
lintr::lint("assignment.R")
lintr::lint("assignment.R")
# Using the `read.csv` function, read the life_expectancy.csv file into
# a variable called `life_expectancy`. Makes sure not to read strings as factors
life_expectancy <- read.csv(file = "data/life_expectancy.csv",
stringsAsFactors = FALSE)
lintr::lint("assignment.R")
# Write your `life_expectancy` data.frame to a new .csv file to your
# data/ directory with the filename `life_expectancy_with_change.csv`.
# Make sure not to write row names.
write.csv(life_expectancy,
file = "data/life_expectancy_with_change.csv", row.names = FALSE)
lintr::lint("assignment.R")
lintr::lint("assignment.R")
# Load the dplyr library
library("dplyr")
setwd("~/Desktop/INFO201/ch10-dplyr/exercise-8")
# Read in the data (from `data/pupulitzer-circulation-data.csv`). Remember to
# not treat strings as factors!
data <- read.csv("data/pupulitzer-circulation-data.csv",
stringsAsFactors = FALSE)
# Read in the data (from `data/pupulitzer-circulation-data.csv`). Remember to
# not treat strings as factors!
data <- read.csv(file = "data/pupulitzer-circulation-data.csv",
stringsAsFactors = FALSE)
setwd("~/Desktop/INFO201/ch10-dplyr/exercise-8")
# Read in the data (from `data/pupulitzer-circulation-data.csv`). Remember to
# not treat strings as factors!
data <- read.csv(file = "data/pupulitzer-circulation-data.csv",
stringsAsFactors = FALSE)
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(vector_of_strings) {
end <- length(vector_of_strings)
for (i in 1:end) {
vector_of_strings <- vector_of_strings[-1]
}
return(vector_of_strings)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
programming_courses <- c("INFO 201", "CSE 142")
programming_courses <- remove_digits(programming_courses)
